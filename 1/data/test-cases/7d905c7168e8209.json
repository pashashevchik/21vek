{"uid":"7d905c7168e8209","name":"test_add_product_to_cart","fullName":"tests.test_add_product_to_cart#test_add_product_to_cart","historyId":"2f5d27f6c252295e1a96b7306a45ad00","time":{"start":1667996972213,"stop":1667996983719,"duration":11506},"description":"Test add product to cart","descriptionHtml":"<p>Test add product to cart</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=107.0.5304.87)\nStacktrace:\n#0 0x55b069ab0463 <unknown>\n#1 0x55b0698748d8 <unknown>\n#2 0x55b069877e67 <unknown>\n#3 0x55b069877ce0 <unknown>\n#4 0x55b06987801c <unknown>\n#5 0x55b0698ba001 <unknown>\n#6 0x55b0698b7745 <unknown>\n#7 0x55b0698b4fe4 <unknown>\n#8 0x55b0698b3b21 <unknown>\n#9 0x55b0698a6421 <unknown>\n#10 0x55b0698d3622 <unknown>\n#11 0x55b0698a5ba7 <unknown>\n#12 0x55b0698d378e <unknown>\n#13 0x55b0698ec30f <unknown>\n#14 0x55b0698d3443 <unknown>\n#15 0x55b0698a43c5 <unknown>\n#16 0x55b0698a5531 <unknown>\n#17 0x55b069b02dce <unknown>\n#18 0x55b069b06192 <unknown>\n#19 0x55b069ae793e <unknown>\n#20 0x55b069b07103 <unknown>\n#21 0x55b069adad85 <unknown>\n#22 0x55b069b280a8 <unknown>\n#23 0x55b069b28239 <unknown>\n#24 0x55b069b43492 <unknown>\n#25 0x7ff17e71f609 start_thread","statusTrace":"self = <pages.main_page.Main_page object at 0x7f13c0e871f0>\n\n    def press_catalog_button(self):\n        try:\n>           self.get_element(self.CATALOG_BUTTON_SELECTOR).click()\n\npages/main_page.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d27aa1e1cb30f5a933cf9966833fc3e9\", element=\"d2892254-efaa-4de5-ab32-2214173982d4\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d27aa1e1cb30f5a933cf9966833fc3e9\", element=\"d2892254-efaa-4de5-ab32-2214173982d4\")>\ncommand = 'clickElement'\nparams = {'id': 'd2892254-efaa-4de5-ab32-2214173982d4'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d27aa1e1cb30f5a933cf9966833fc3e9\")>\ndriver_command = 'clickElement'\nparams = {'id': 'd2892254-efaa-4de5-ab32-2214173982d4'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f13c0768eb0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#23 0x55b069b28239 \\\\u003Cunknown>\\\\n#24 0x55b069b43492 \\\\u003Cunknown>\\\\n#25 0x7ff17e71f609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=107.0.5304.87)\nE       Stacktrace:\nE       #0 0x55b069ab0463 <unknown>\nE       #1 0x55b0698748d8 <unknown>\nE       #2 0x55b069877e67 <unknown>\nE       #3 0x55b069877ce0 <unknown>\nE       #4 0x55b06987801c <unknown>\nE       #5 0x55b0698ba001 <unknown>\nE       #6 0x55b0698b7a79 <unknown>\nE       #7 0x55b0698b4fe4 <unknown>\nE       #8 0x55b0698b3b21 <unknown>\nE       #9 0x55b0698a6421 <unknown>\nE       #10 0x55b0698d3622 <unknown>\nE       #11 0x55b0698a5ba7 <unknown>\nE       #12 0x55b0698d378e <unknown>\nE       #13 0x55b0698ec30f <unknown>\nE       #14 0x55b0698d3443 <unknown>\nE       #15 0x55b0698a43c5 <unknown>\nE       #16 0x55b0698a5531 <unknown>\nE       #17 0x55b069b02dce <unknown>\nE       #18 0x55b069b06192 <unknown>\nE       #19 0x55b069ae793e <unknown>\nE       #20 0x55b069b07103 <unknown>\nE       #21 0x55b069adad85 <unknown>\nE       #22 0x55b069b280a8 <unknown>\nE       #23 0x55b069b28239 <unknown>\nE       #24 0x55b069b43492 <unknown>\nE       #25 0x7ff17e71f609 start_thread\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.description(\"Test add product to cart\")\n    def test_add_product_to_cart():\n        \"\"\" Critical path test, authorization and choice to the desired catalog\n        select product(smartwatch) and add in to the cart \"\"\"\n    \n        options = Options()\n        options.add_argument('--headless')\n        options.add_argument('--window-size=1920x1080')\n        options.add_experimental_option('excludeSwitches', ['enable-logging'])\n        driver = webdriver.Chrome(ChromeDriverManager().install(), chrome_options=options)\n    \n        print(\"Start Test\")\n    \n        \"\"\" User Authorization with valid data \"\"\"\n        Login_page(driver).authorization()\n    \n        \"\"\" Select the desired directory \"\"\"\n>       Main_page(driver).select_catalog()\n\ntests/test_add_product_to_cart.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:46: in select_catalog\n    self.press_catalog_button()\npages/main_page.py:29: in press_catalog_button\n    self.get_element(self.CATALOG_BUTTON_SELECTOR).click()\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f13c0768eb0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#23 0x55b069b28239 \\\\u003Cunknown>\\\\n#24 0x55b069b43492 \\\\u003Cunknown>\\\\n#25 0x7ff17e71f609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=107.0.5304.87)\nE       Stacktrace:\nE       #0 0x55b069ab0463 <unknown>\nE       #1 0x55b0698748d8 <unknown>\nE       #2 0x55b069877e67 <unknown>\nE       #3 0x55b069877ce0 <unknown>\nE       #4 0x55b06987801c <unknown>\nE       #5 0x55b0698ba001 <unknown>\nE       #6 0x55b0698b7745 <unknown>\nE       #7 0x55b0698b4fe4 <unknown>\nE       #8 0x55b0698b3b21 <unknown>\nE       #9 0x55b0698a6421 <unknown>\nE       #10 0x55b0698d3622 <unknown>\nE       #11 0x55b0698a5ba7 <unknown>\nE       #12 0x55b0698d378e <unknown>\nE       #13 0x55b0698ec30f <unknown>\nE       #14 0x55b0698d3443 <unknown>\nE       #15 0x55b0698a43c5 <unknown>\nE       #16 0x55b0698a5531 <unknown>\nE       #17 0x55b069b02dce <unknown>\nE       #18 0x55b069b06192 <unknown>\nE       #19 0x55b069ae793e <unknown>\nE       #20 0x55b069b07103 <unknown>\nE       #21 0x55b069adad85 <unknown>\nE       #22 0x55b069b280a8 <unknown>\nE       #23 0x55b069b28239 <unknown>\nE       #24 0x55b069b43492 <unknown>\nE       #25 0x7ff17e71f609 start_thread\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Test add product to cart","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=107.0.5304.87)\nStacktrace:\n#0 0x55b069ab0463 <unknown>\n#1 0x55b0698748d8 <unknown>\n#2 0x55b069877e67 <unknown>\n#3 0x55b069877ce0 <unknown>\n#4 0x55b06987801c <unknown>\n#5 0x55b0698ba001 <unknown>\n#6 0x55b0698b7745 <unknown>\n#7 0x55b0698b4fe4 <unknown>\n#8 0x55b0698b3b21 <unknown>\n#9 0x55b0698a6421 <unknown>\n#10 0x55b0698d3622 <unknown>\n#11 0x55b0698a5ba7 <unknown>\n#12 0x55b0698d378e <unknown>\n#13 0x55b0698ec30f <unknown>\n#14 0x55b0698d3443 <unknown>\n#15 0x55b0698a43c5 <unknown>\n#16 0x55b0698a5531 <unknown>\n#17 0x55b069b02dce <unknown>\n#18 0x55b069b06192 <unknown>\n#19 0x55b069ae793e <unknown>\n#20 0x55b069b07103 <unknown>\n#21 0x55b069adad85 <unknown>\n#22 0x55b069b280a8 <unknown>\n#23 0x55b069b28239 <unknown>\n#24 0x55b069b43492 <unknown>\n#25 0x7ff17e71f609 start_thread","statusTrace":"self = <pages.main_page.Main_page object at 0x7f13c0e871f0>\n\n    def press_catalog_button(self):\n        try:\n>           self.get_element(self.CATALOG_BUTTON_SELECTOR).click()\n\npages/main_page.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d27aa1e1cb30f5a933cf9966833fc3e9\", element=\"d2892254-efaa-4de5-ab32-2214173982d4\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"d27aa1e1cb30f5a933cf9966833fc3e9\", element=\"d2892254-efaa-4de5-ab32-2214173982d4\")>\ncommand = 'clickElement'\nparams = {'id': 'd2892254-efaa-4de5-ab32-2214173982d4'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d27aa1e1cb30f5a933cf9966833fc3e9\")>\ndriver_command = 'clickElement'\nparams = {'id': 'd2892254-efaa-4de5-ab32-2214173982d4'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f13c0768eb0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#23 0x55b069b28239 \\\\u003Cunknown>\\\\n#24 0x55b069b43492 \\\\u003Cunknown>\\\\n#25 0x7ff17e71f609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=107.0.5304.87)\nE       Stacktrace:\nE       #0 0x55b069ab0463 <unknown>\nE       #1 0x55b0698748d8 <unknown>\nE       #2 0x55b069877e67 <unknown>\nE       #3 0x55b069877ce0 <unknown>\nE       #4 0x55b06987801c <unknown>\nE       #5 0x55b0698ba001 <unknown>\nE       #6 0x55b0698b7a79 <unknown>\nE       #7 0x55b0698b4fe4 <unknown>\nE       #8 0x55b0698b3b21 <unknown>\nE       #9 0x55b0698a6421 <unknown>\nE       #10 0x55b0698d3622 <unknown>\nE       #11 0x55b0698a5ba7 <unknown>\nE       #12 0x55b0698d378e <unknown>\nE       #13 0x55b0698ec30f <unknown>\nE       #14 0x55b0698d3443 <unknown>\nE       #15 0x55b0698a43c5 <unknown>\nE       #16 0x55b0698a5531 <unknown>\nE       #17 0x55b069b02dce <unknown>\nE       #18 0x55b069b06192 <unknown>\nE       #19 0x55b069ae793e <unknown>\nE       #20 0x55b069b07103 <unknown>\nE       #21 0x55b069adad85 <unknown>\nE       #22 0x55b069b280a8 <unknown>\nE       #23 0x55b069b28239 <unknown>\nE       #24 0x55b069b43492 <unknown>\nE       #25 0x7ff17e71f609 start_thread\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.description(\"Test add product to cart\")\n    def test_add_product_to_cart():\n        \"\"\" Critical path test, authorization and choice to the desired catalog\n        select product(smartwatch) and add in to the cart \"\"\"\n    \n        options = Options()\n        options.add_argument('--headless')\n        options.add_argument('--window-size=1920x1080')\n        options.add_experimental_option('excludeSwitches', ['enable-logging'])\n        driver = webdriver.Chrome(ChromeDriverManager().install(), chrome_options=options)\n    \n        print(\"Start Test\")\n    \n        \"\"\" User Authorization with valid data \"\"\"\n        Login_page(driver).authorization()\n    \n        \"\"\" Select the desired directory \"\"\"\n>       Main_page(driver).select_catalog()\n\ntests/test_add_product_to_cart.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:46: in select_catalog\n    self.press_catalog_button()\npages/main_page.py:29: in press_catalog_button\n    self.get_element(self.CATALOG_BUTTON_SELECTOR).click()\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f13c0768eb0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#23 0x55b069b28239 \\\\u003Cunknown>\\\\n#24 0x55b069b43492 \\\\u003Cunknown>\\\\n#25 0x7ff17e71f609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=107.0.5304.87)\nE       Stacktrace:\nE       #0 0x55b069ab0463 <unknown>\nE       #1 0x55b0698748d8 <unknown>\nE       #2 0x55b069877e67 <unknown>\nE       #3 0x55b069877ce0 <unknown>\nE       #4 0x55b06987801c <unknown>\nE       #5 0x55b0698ba001 <unknown>\nE       #6 0x55b0698b7745 <unknown>\nE       #7 0x55b0698b4fe4 <unknown>\nE       #8 0x55b0698b3b21 <unknown>\nE       #9 0x55b0698a6421 <unknown>\nE       #10 0x55b0698d3622 <unknown>\nE       #11 0x55b0698a5ba7 <unknown>\nE       #12 0x55b0698d378e <unknown>\nE       #13 0x55b0698ec30f <unknown>\nE       #14 0x55b0698d3443 <unknown>\nE       #15 0x55b0698a43c5 <unknown>\nE       #16 0x55b0698a5531 <unknown>\nE       #17 0x55b069b02dce <unknown>\nE       #18 0x55b069b06192 <unknown>\nE       #19 0x55b069ae793e <unknown>\nE       #20 0x55b069b07103 <unknown>\nE       #21 0x55b069adad85 <unknown>\nE       #22 0x55b069b280a8 <unknown>\nE       #23 0x55b069b28239 <unknown>\nE       #24 0x55b069b43492 <unknown>\nE       #25 0x7ff17e71f609 start_thread\n\n/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: StaleElementReferenceException","steps":[{"name":"Authorization","time":{"start":1667996973766,"stop":1667996981164,"duration":7398},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Select catalog","time":{"start":1667996981164,"stop":1667996983718,"duration":2554},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=107.0.5304.87)\nStacktrace:\n#0 0x55b069ab0463 <unknown>\n#1 0x55b0698748d8 <unknown>\n#2 0x55b069877e67 <unknown>\n#3 0x55b069877ce0 <unknown>\n#4 0x55b06987801c <unknown>\n#5 0x55b0698ba001 <unknown>\n#6 0x55b0698b7745 <unknown>\n#7 0x55b0698b4fe4 <unknown>\n#8 0x55b0698b3b21 <unknown>\n#9 0x55b0698a6421 <unknown>\n#10 0x55b0698d3622 <unknown>\n#11 0x55b0698a5ba7 <unknown>\n#12 0x55b0698d378e <unknown>\n#13 0x55b0698ec30f <unknown>\n#14 0x55b0698d3443 <unknown>\n#15 0x55b0698a43c5 <unknown>\n#16 0x55b0698a5531 <unknown>\n#17 0x55b069b02dce <unknown>\n#18 0x55b069b06192 <unknown>\n#19 0x55b069ae793e <unknown>\n#20 0x55b069b07103 <unknown>\n#21 0x55b069adad85 <unknown>\n#22 0x55b069b280a8 <unknown>\n#23 0x55b069b28239 <unknown>\n#24 0x55b069b43492 <unknown>\n#25 0x7ff17e71f609 start_thread\n\n","statusTrace":"  File \"/home/runner/work/21vek/21vek/pages/main_page.py\", line 46, in select_catalog\n    self.press_catalog_button()\n  File \"/home/runner/work/21vek/21vek/pages/main_page.py\", line 29, in press_catalog_button\n    self.get_element(self.CATALOG_BUTTON_SELECTOR).click()\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.6/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_add_product_to_cart"},{"name":"host","value":"fv-az198-447"},{"name":"thread","value":"2290-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_add_product_to_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7d905c7168e8209.json","parameterValues":[]}